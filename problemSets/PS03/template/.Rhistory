是0.05
#
置
信
区
间
的
边
际
误
差
margin_of_error <- t_critical * (sd_iq / sqrt(n))
# 90%
置
信
区
间
confidence_interval <- c(mean_iq - margin_of_error, mean_iq + margin_of_error)
#
输
出
结
果
cat("90%
置
信
区
间
为
：", confidence_interval, "\n")
#
定
义IQ
数
据
集
iq_scores <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98,
80, 97, 95, 111, 114, 89, 95, 126, 98)
#
计
算
样
本
均
值
mean_iq <- mean(iq_scores)
#
计
算
样
本
标
准
差
sd_iq <- sd(iq_scores)
#
计
算n-1
（
自
由
度
）
n <- length(iq_scores)
df <- n - 1
#
查
找90%
置
信
水
平
的t
值
（
双
侧
为0.1
，
单
侧
为0.05
）
t_ci <- qt(0.95, df)  #
因
为
是
双
侧
的0.1
，
所
以
查
单
侧0.05
的t
值
，
然
后
用
于
双
侧
计
算
#
计
算
边
际
误
差
margin_of_error <- t_ci * (sd_iq / sqrt(n))
#
计
算
置
信
区
间
ci_lower <- mean_iq - margin_of_error
ci_upper <- mean_iq + margin_of_error
#
输
出
结
果
cat("90%
置
信
区
间
为: [", ci_lower, ", ", ci_upper, "]\n")
#
定
义
全
国
平
均IQ
national_mean_iq <- 100
#
计
算t
检
验
统
计
量
t_stat <- (mean_iq - national_mean_iq) / (sd_iq / sqrt(n))
#
计
算p
值
（
单
尾
检
验
）
p_value <- pt(t_stat, df, lower.tail = FALSE)
# lower.tail = FALSE
表
示
我
们
关
心
的
是t
值
大
于
当
前t_stat
的
概
率
#
输
出
结
果
cat("t
统
计
量
为: ", t_stat, "\n") cat("p
值
为: ", p_value, "\n")
#
定
义
全
国
平
均IQ
national_mean_iq <- 100
#
计
算t
检
验
统
计
量
t_stat <- (mean_iq - national_mean_iq) / (sd_iq / sqrt(n))
#
计
算p
值
（
单
尾
检
验
）
p_value <- pt(t_stat, df, lower.tail = FALSE)
# lower.tail = FALSE
表
示
我
们
关
心
的
是t
值
大
于
当
前t_stat
的
概
率
#
输
出
结
果
cat("t
统
计
量
为: ", t_stat, "\n") cat("p
值
为: ", p_value, "\n")
#
全
国
平
均IQ
mu_0 <- 100
# t
检
验
t_test_result <- t.test(iq_scores, mu = mu_0, alternative = "greater", conf.level = 0.95)
#
输
出
结
果
print(t_test_result)
# Import the dataset
data <- read.csv("expenditure_data.csv")
# Import the dataset
data <- read.csv("expenditure_data.csv")
e x p e n di t u r e <
❂ re ad . t a bl e (
” h t t p s : //raw . gi t h u b u s e r c o n t e n t . com/ASDS
❂TCD/
# Import the dataset
data <- read.csv("expenditure_data.csv")
expenditure <- read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2024/main/datasets/expenditure.txt", header=T)
# Load necessary library
library(ggplot2)
png ( f i l e =
”Y˜Region . png
” )
png ( f i l e =
”Y˜Region . png
” )
png ( f i l e =
”Y˜X1 Region . png
” )
q()
setwd("E:/StatsI_Fall2024/problemSets/PS03")
# read in data
inc.sub <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2024/main/datasets/incumbents_subset.csv")
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# read in data
inc.sub <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2024/main/datasets/incumbents_subset.csv")
# remove objects
rm(list=ls())
detachAllPackages()
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read in data
inc.sub <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2024/main/datasets/incumbents_subset.csv")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read in data
inc.sub <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2024/main/datasets/incumbents_subset.csv")
model <- lm(voteshare ~ difflog2, data=inc.sub)
setwd("E:/StatsI_Fall2024/problemSets/PS03/template")
model <- lm(voteshare ~ difflog2, data=inc.sub)
model <- lm(voteshare ~ difflog2, data=inc.sub)
model <- lm(voteshare ~ difflog, data=inc.sub)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot(inc.sub, aes(x=difflog, y=voteshare)) +
geom_point() +
geom_smooth(method="lm", col="purple") +
labs(title="Scatterplot of Vote Share vs. Campaign Spending Difference", x="Difference in Campaign Spending (log)", y="Vote Share")
residuals <- residuals(model)
prediction_equation <- paste("Vote Share =", round(coef(model)[1], 2), " + ", round(coef(model)[2], 2), "* difflog")
print(prediction_equation)
source("E:/StatsI_Fall2024/problemSets/PS03/template/PS3.R")
# read in data
inc.sub <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2024/main/datasets/incumbents_subset.csv")
# Run a regression where the outcome variable is voteshare and the explanatory variable is difflog
model <- lm(voteshare ~ difflog, data=inc.sub)
source("E:/StatsI_Fall2024/problemSets/PS03/template/PS3.R")
source("E:/StatsI_Fall2024/problemSets/PS03/template/PS3.R")
# Run a regression where the outcome variable is voteshare and the explanatory variable is difflog
model <- lm(voteshare ~ difflog, data=inc.sub)
ggplot(inc.sub, aes(x=difflog, y=voteshare)) +
geom_point() +
geom_smooth(method="lm", col="purple") +
labs(title="Scatterplot of Vote Share vs. Campaign Spending Difference", x="Difference in Campaign Spending (log2)", y="Vote Share")
ggplot(inc.sub, aes(x=difflog, y=voteshare)) +
geom_point() +
geom_smooth(method="lm", col="purple") +
labs(title="Scatterplot of Vote Share vs. Campaign Spending Difference", x="Difference in Campaign Spending (log2)", y="Vote Share")
library(ggplot2)
ggplot(inc.sub, aes(x=difflog, y=voteshare)) +
geom_point() +
geom_smooth(method="lm", col="purple") +
labs(title="Scatterplot of Vote Share vs. Campaign Spending Difference", x="Difference in Campaign Spending (log2)", y="Vote Share")
#Question2:
# Run the regression
model <- lm(presvote ~ difflog, data = inc.sub)
# Create a scatterplot and add the regression line
ggplot(inc.sub, aes(x = difflog, y = presvote)) +
geom_point() +  # Add scatterplot
geom_smooth(method = "lm", color = "red") +  # Add regression line
labs(title = "Scatterplot of Presidential Vote Share vs. Campaign Spending Difference",
x = "Difference in Campaign Spending (log)",
y = "Presidential Vote Share")
# Create a scatterplot and add the regression line
ggplot(inc.sub, aes(x = difflog, y = presvote)) +
geom_point() +  # Add scatterplot
geom_smooth(method = "lm", color = "green") +  # Add regression line
labs(title = "Scatterplot of Presidential Vote Share vs. Campaign Spending Difference",
x = "Difference in Campaign Spending (log)",
y = "Presidential Vote Share")
# Save the residuals of the model in a separate object
residuals <- residuals(model)
# Save the residuals of the model in a separate object
residuals <- residuals(model)
print(prediction_equation)
prediction_equation <- paste("presvote = ",
round(coefficients[1], 2), " + ",
round(coefficients[2], 2), " * difflog")
# Write the prediction equation
coefficients <- coef(model)
prediction_equation <- paste("presvote = ",
round(coefficients[1], 2), " + ",
round(coefficients[2], 2), " * difflog")
print(prediction_equation)
ggplot(inc.sub, aes(x=difflog, y=voteshare)) +
geom_point() +
geom_smooth(method="lm", col="purple") +
labs(title="Scatterplot of Vote Share vs. Campaign Spending Difference", x="Difference in Campaign Spending (log2)", y="Vote Share")
print(prediction_equation1)
# Write the prediction equation
coefficients1 <- coef(model1)
#Question1:
# Run a regression where the outcome variable is voteshare and the explanatory variable is difflog
model1 <- lm(voteshare ~ difflog, data=inc.sub)
ggplot(inc.sub, aes(x=difflog, y=voteshare)) +
geom_point() +
geom_smooth(method="lm", col="purple") +
labs(title="Scatterplot of Vote Share vs. Campaign Spending Difference", x="Difference in Campaign Spending", y="Vote Share")
# Save the residuals of the model in a separate object
residuals1 <- residuals(model1)
# Write the prediction equation
coefficients1 <- coef(model1)
prediction_equation1 <- paste("voteshare = ",
round(coefficients1[1], 2), " + ",
round(coefficients1[2], 2), " * difflog")
print(prediction_equation1)
# Create a scatterplot and add the regression line
ggplot(inc.sub, aes(x = difflog, y = presvote)) +
geom_point() +  # Add scatterplot
geom_smooth(method = "lm", color = "green") +  # Add regression line
labs(title = "Scatterplot of Presidential Vote Share vs Campaign Spending Difference",
x = "Difference in Campaign Spending ",
y = "Presidential Vote Share")
print(prediction_equation2)
# Write the prediction equation
coefficients2 <- coef(model2)
#Question2:
# Run the regression
model2 <- lm(presvote ~ difflog, data = inc.sub)
# Create a scatterplot and add the regression line
ggplot(inc.sub, aes(x = difflog, y = presvote)) +
geom_point() +  # Add scatterplot
geom_smooth(method = "lm", color = "green") +  # Add regression line
labs(title = "Scatterplot of Presidential Vote Share vs Campaign Spending Difference",
x = "Difference in Campaign Spending ",
y = "Presidential Vote Share")
# Save the residuals of the model in a separate object
residuals2 <- residuals(model2)
# Write the prediction equation
coefficients2 <- coef(model2)
print(prediction_equation2)
prediction_equation2 <- paste("presvote = ",
round(coefficients[1], 2), " + ",
round(coefficients[2], 2), " * difflog")
print(prediction_equation2)
#Question3:
# Run the regression
model3 <- lm(voteshare ~ presvote, data = inc.sub)
# Write the prediction equation
coefficients3 <- coef(model3)
# Create a scatterplot and add the regression line
ggplot(inc.sub, aes(x = presvote, y = voteshare)) +
geom_point() +  # Add scatterplot
geom_smooth(method = "lm", color = "red") +  # Add regression line
labs(title = "Scatterplot of Vote Share vs Presidential Vote Share",
x = "Presidential Vote Share",
y = "Vote Share")
prediction_equation3 <- paste("voteshare = ",
round(coefficients3[1], 2), " + ",
round(coefficients3[2], 2), " * presvote")
print(prediction_equation3)
#Question4：
# Run the regression
model4 <- lm(residuals1 ~ residuals2)
# Create a scatterplot and add the regression line
ggplot(data.frame(residuals1, residuals2), aes(x = residuals2, y = residuals1)) +
geom_point() +  # Add scatterplot
geom_smooth(method = "lm", color = "yellow") +  # Add regression line
labs(title = "Scatterplot of Residuals from Question 1 vs Residuals from Question 2",
x = "Residuals from Question 2",
y = "Residuals from Question 1")
# Write the prediction equation
coefficients4 <- coef(model4)
print(prediction_equation4)
prediction_equation4 <- paste("residuals1 = ",
round(coefficients4[1], 2), " + ",
round(coefficients4[2], 2), " * residuals2")
print(prediction_equation4)
#Question5:
# Run the regression
model5 <- lm(voteshare ~ difflog + presvote, data = inc.sub)
# Write the prediction equation
coefficients5 <- coef(model5)
prediction_equation5 <- paste("voteshare = ",
round(coefficients5[1], 2), " + ",
round(coefficients5[2], 2), " * difflog + ",
round(coefficients5[3], 2), " * presvote")
print(prediction_equation5)
