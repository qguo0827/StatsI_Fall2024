q()
# 定义IQ数据集
iq_scores <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98,
80, 97, 95, 111, 114, 89, 95, 126, 98)
# 计算样本均值
mean_iq <- mean(iq_scores)
# 计算样本标准差
sd_iq <- sd(iq_scores)
# 计算n-1（自由度）
n <- length(iq_scores)
df <- n - 1
# 查找90%置信水平的t值（双侧为0.1，单侧为0.05）
t_ci <- qt(0.95, df)  # 因为是双侧的0.1，所以查单侧0.05的t值，然后用于双侧计算
# 计算边际误差
margin_of_error <- t_ci * (sd_iq / sqrt(n))
# 计算置信区间
ci_lower <- mean_iq - margin_of_error
ci_upper <- mean_iq + margin_of_error
# 输出结果
cat("90%置信区间为: [", ci_lower, ", ", ci_upper, "]\n")
expenditure <- read.table("https://raw.githubusercontent.co       #Defining the IQ Dataset
iq_scores <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
# Calculate the sample mean
mean_iq <- mean(iq_scores)
#Calculate sample standard deviation
sd_iq <- sd(iq_scores)
# Calculate n-1 (degrees of freedom)
n <- length(iq_scores) df <- n - 1
# Find the t-value for a 90% confidence level (0.1 for two-sided and 0.05 for one-sided)
t_ci <- qt(0.95, df)
# Because it is a two-sided 0.1, the t value of 0.05 on one side is checked and then used for the two-sided calculation
# Calculating the margin of error
margin_of_error <- t_ci * (sd_iq / sqrt(n))
# Calculating confidence intervals
ci_lower <- mean_iq - margin_of_error ci_upper <- mean_iq + margin_of_error
# Output
cat("90%Confidence interval: [", ci_lower, ", ", ci_upper, "]\n")m/ASDS-TCD/StatsI_Fall2024/main/datasets/expenditure.txt", header=T)
#Defining the IQ Dataset
iq_scores <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
# Calculate the sample mean
mean_iq <- mean(iq_scores)
#Calculate sample standard deviation
sd_iq <- sd(iq_scores)
# Calculate n-1 (degrees of freedom)
n <- length(iq_scores) df <- n - 1
#Defining the IQ Dataset
iq_scores <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
# Calculate the sample mean
mean_iq <- mean(iq_scores)
#Calculate sample standard deviation
sd_iq <- sd(iq_scores)
# Calculate n-1 (degrees of freedom)
n <- length(iq_scores) df <- n - 1
#Defining the IQ Dataset
iq_scores <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
# Calculate the sample mean
mean_iq <- mean(iq_scores)
#Calculate sample standard deviation
sd_iq <- sd(iq_scores)
# Calculate n-1 (degrees of freedom)
n <- length(iq_scores) df <- n - 1
# 定义IQ数据集
iq_scores <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98,
80, 97, 95, 111, 114, 89, 95, 126, 98)
# 计算样本均值
mean_iq <- mean(iq_scores)
# 计算样本标准差
sd_iq <- sd(iq_scores)
# 计算n-1（自由度）
n <- length(iq_scores)
df <- n - 1
# 查找90%置信水平的t值（双侧为0.1，单侧为0.05）
t_ci <- qt(0.95, df)  # 因为是双侧的0.1，所以查单侧0.05的t值，然后用于双侧计算
# 计算边际误差
margin_of_error <- t_ci * (sd_iq / sqrt(n))
# 计算置信区间
ci_lower <- mean_iq - margin_of_error
ci_upper <- mean_iq + margin_of_error
# 输出结果
cat("90%置信区间为: [", ci_lower, ", ", ci_upper, "]\n")
# National average IQ
national_mean <- 100
# Perform the one-sample t-test
t_test_result <- t.test(y, mu = national_mean, alternative = "greater", conf.level = 0.95)
# 样本数据
iq_scores <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98,
80, 97, 95, 111, 114, 89, 95, 126, 98)
# 样本均值
mean_iq <- mean(iq_scores)
# 样本标准差
sd_iq <- sd(iq_scores)
# 样本大小
n <- length(iq_scores)
# 90%置信区间的临界t值（自由度n-1）
t_critical <- qt(0.95, df = n - 1)  # 注意：qt函数返回的是双侧临界值，所以我们需要用0.95而不是0.05
# 置信区间的边际误差
margin_of_error <- t_critical * (sd_iq / sqrt(n))
# 90%置信区间
confidence_interval <- c(mean_iq - margin_of_error, mean_iq + margin_of_error)
# 输出结果
cat("90%置信区间为：", confidence_interval, "\n")
# 定义IQ数据集
iq_scores <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98,
80, 97, 95, 111, 114, 89, 95, 126, 98)
# 计算样本均值
mean_iq <- mean(iq_scores)
# 计算样本标准差
sd_iq <- sd(iq_scores)
# 计算n-1（自由度）
n <- length(iq_scores)
df <- n - 1
# 查找90%置信水平的t值（双侧为0.1，单侧为0.05）
t_ci <- qt(0.95, df)  # 因为是双侧的0.1，所以查单侧0.05的t值，然后用于双侧计算
# 计算边际误差
margin_of_error <- t_ci * (sd_iq / sqrt(n))
# 计算置信区间
ci_lower <- mean_iq - margin_of_error
ci_upper <- mean_iq + margin_of_error
# 输出结果
cat("90%置信区间为: [", ci_lower, ", ", ci_upper, "]\n")
# 定义全国平均IQ
national_mean_iq <- 100
# 计算t检验统计量
t_stat <- (mean_iq - national_mean_iq) / (sd_iq / sqrt(n))
# 计算p值（单尾检验）
p_value <- pt(t_stat, df, lower.tail = FALSE)
# lower.tail = FALSE 表示我们关心的是t值大于当前t_stat的概率
# 输出结果
cat("t统计量为: ", t_stat, "\n") cat("p值为: ", p_value, "\n")
# 定义全国平均IQ
national_mean_iq <- 100
# 计算t检验统计量
t_stat <- (mean_iq - national_mean_iq) / (sd_iq / sqrt(n))
# 计算p值（单尾检验）
p_value <- pt(t_stat, df, lower.tail = FALSE)
# lower.tail = FALSE 表示我们关心的是t值大于当前t_stat的概率
# 输出结果
cat("t统计量为: ", t_stat, "\n") cat("p值为: ", p_value, "\n")
# 全国平均IQ
mu_0 <- 100
# t检验
t_test_result <- t.test(iq_scores, mu = mu_0, alternative = "greater", conf.level = 0.95)
# 输出结果
print(t_test_result)
# Import the dataset
data <- read.csv("expenditure_data.csv")
# Import the dataset
data <- read.csv("expenditure_data.csv")
e x p e n di t u r e <❂ re ad . t a bl e ( ” h t t p s : //raw . gi t h u b u s e r c o n t e n t . com/ASDS❂TCD/
# Import the dataset
data <- read.csv("expenditure_data.csv")
expenditure <- read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2024/main/datasets/expenditure.txt", header=T)
# Load necessary library
library(ggplot2)
png ( f i l e = ”Y˜Region . png” )
png ( f i l e = ”Y˜Region . png” )
png ( f i l e = ”Y˜X1 Region . png” )
# Calculate total frequency (grand total)
grand_total <- sum(observed)
setwd("E:/StatsI_Fall2024/problemSets/PS02/template")
#section 1
#question a
#Observed frequencies
observed <- matrix(c(14, 6, 7,
7, 7, 1),
nrow = 2, byrow = TRUE)
# Calculate total frequency (grand total)
grand_total <- sum(observed)
col_totals <- colSums(observed)
# Put the calculated expected frequencies into a matrix
expected <- matrix(c(fe_11, fe_12, fe_13,
fe_21, fe_22, fe_23),
nrow = 2, byrow = TRUE)
fe_23 <- (row_totals[2] / grand_total) * col_totals[3]  # Lower class, Stopped/given warning
col_totals <- colSums(observed)
fe_13 <- (row_totals[1] / grand_total) * col_totals[3]  # Upper class, Stopped/given warning
# Calculate expected frequency for each cell
fe_11 <- (row_totals[1] / grand_total) * col_totals[1]  # Upper class, Not Stopped
col_totals <- colSums(observed)
